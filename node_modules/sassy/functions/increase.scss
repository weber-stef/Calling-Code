///--------------------------------------------------------------------------///

@import 'type', 'set';

///--------------------------------------------------------------------------///

///
/// @method increase
/// increases a number [in a map] by X
/// @param map {map|number} designed for map, can be number
/// @param key {string|list|number} key (or keylist) to number, 
///   or the number for X if map is a number
/// @param x {number} x when map is really a map
/// @return updated {map|number} the updated map or number
///

///--------------------------------------------------------------------------///

@function increase( $map, $key:1, $x:1  ){

  $_DEBUG: false;
  
  //increase a regular number
  @if type( $map, number ) {
    @return $map + $key;
  }
  
  //increase a number inside a map
  @if type( $map, map ){    
    
    $n: get( $map, $key );          
    
    @if type( $n, number ) {      
      $v: $n + $x;
      @if $_DEBUG { @debug 'changing #{$n} by #{$x} (result: #{$v})'; }
      $map: set( $map, $key, $v );      
      @return $map;
    } @else {
      @warn 'the key provided to increase did not lead to a number...';
    }
  }
  
  //toss if still here
  @error 'increase only works on numbers (or a map/keystring leading to a number value)';
  
}

///--------------------------------------------------------------------------///

@if false {
  $c: 0;
  $r: increase( $c );
  @debug 'increase  works: #{$r==1}';
  
  $c: total;
  $m1: ( #{$c}: 0, a: map );
  $r: increase( $m1, $c );
  $r: get( $r, $c ) == 1;
  @debug 'increase [map] works: #{($r)}';
}

///--------------------------------------------------------------------------///