///--------------------------------------------------------------------------///

@import 'has', 'compare';

///--------------------------------------------------------------------------///

@function str-contains( $s, $ss ){
  $c: str-index( $s, $ss );  
  @return $c != null;
}

@function list-contains( $list, $value ){
  $c: false;
  @each $item in $list { @if compare( $item, $value ) { $c: true; } }
  @return $c;
}

@function list-contains-any( $list, $v... ){
  @if length( $v ) == 0 { @return false; }
  $c: ();
  @each $i in $list {
    $r: list-contains( $list, $i );
    @if $r { $c: append( $c, $i ); }
  }
  @return if( length( $c ), $c, false );
}

@function list-contains-all( $list, $v... ){
  @if length( $v ) == 0 { @return false; }
  @each $i in $list {
    $r: list-contains( $list, $i );
    @if $r != true { @return false; }
  }
  @return true;
}

///--------------------------------------------------------------------------///

$handlers: (
  list: list-contains,
  string: str-contains,
  map: has
);

///--------------------------------------------------------------------------///


/// 
/// @method contains
/// checks if an item contains a value
/// @uses compare
/// 

@function contains( $item, $value ) {
  $r: false;
  $t: type-of( $item );
  $h: has( $handlers, $t, true );  
  @if $h {
    //call appropriate contains handler for type
    $r: call( $h, $item, $value )
  }
  @return $r;
}

///--------------------------------------------------------------------------///

@if false {
  
  $a: string;  
  $r: contains( $a, ring );
  @debug 'contains [string]: #{ $r }';
  
 
  $a: ( a, list );
  $r: contains( $a, list );
  @debug 'contains [list]: #{ $r }';
    
  $a: ( a: map );
  $r: contains( $a, a );
  @debug 'contains [map]: #{ $r }';
  
}
///--------------------------------------------------------------------------///