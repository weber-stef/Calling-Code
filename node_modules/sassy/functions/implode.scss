///--------------------------------------------------------------------------///

@import
  'print'
;

///--------------------------------------------------------------------------///

///
/// @method implode
/// joins a list as a string by glue
/// @param list {list} the list to implode
/// @param [wrap=false] {bool} wrap final string in parenthesis?
/// @param [glue=', '] {string} the glue to join list entries with
/// @return list_string {string} the list as a {glue} separated string
///

@function implode( $list, $wrap: false, $glue:', ' ) {

  //toss if invalid list
  @if type-of($list) != list { 
    @error 'implode requires a list as first parameter!';
  }
  
  //check for reversed wrap/glue
  @if type-of( $wrap ) == string {
    $w: $wrap;
    $g: $glue;
    $wrap: if( type-of( $g ) == bool, $g, false );
    $glue: $w;
  }
  
  //implode list to string
  $s: '';
  $i: 0;
  $l: length($list);
  @each $x in $list {    
    $i: $i+1;
    @if type-of( $x ) == map {
      $x: print($x);
    }
    @if type-of( $x ) == list {
      $x: implode( $x, true );
    }
    $s: if( $i == $l, $s+$x, $s+$x+$glue );
  }
  
  //wrap if needed
  @if $wrap { $s: '( #{$s} )'; }
  
  @return $s;

}

///--------------------------------------------------------------------------///


@if false {
   
  $a: list of things;
  $r: implode( $a );
  $e: 'list, of, things';  
  @debug 'implode[ default: ", " ]: #{ $r == $e }';
  
  $r: implode( $a, true );
  $e: '( #{$e} )';  
  @debug 'implode[ wrap ]: #{ $r == $e }';
  
  $a: ( hyphen string );
  $e: 'hyphen-string';
  $r: implode( $a, '-' );  
  @debug 'implode [ custom: "-" ]: #{ $r == $e }';
 
}
///--------------------------------------------------------------------------///