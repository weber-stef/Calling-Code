///--------------------------------------------------------------------------///

@import 'set';
  
///--------------------------------------------------------------------------///

///
/// @method pluck
/// pulls a key from each map provided, returns in a list
/// @param key {string|list} the key that all maps provided share
/// @rest map {map} the map to pluck with
/// @return plucked {list} the values matching keys in maps provided, sequentially

@function pluck( $key, $maps... ){
  
  $_DEBUG: false;
  
  $p: ();  
  
  //allow list of maps
  @if length($maps) == 1 { $maps: nth( $maps, 1 );  }
  
  @each $map in $maps {
    
    @if type-of( $map ) != map {
      @error 'pluck( $keys, $maps... ) requires valid maps after key(s)!'
    }
  
    $v: has( $map, $key, true );
    
    @if $_DEBUG { @debug 'plucking "#{$key}" from map, received #{type($v)}'; }
    
    @if $v == null { @warn 'Key #{$key} was not found in one of the maps'; }
    
    $p: append( $p, $v );
    
  }
    
  @return $p;

}

///--------------------------------------------------------------------------///

@if false {

  $a: ( ( a: 1 ), ( a: 2 ), ( a: 3 ) );
  $r: pluck( a, $a );
  $e: 1 2 3;  
  @debug 'pluck works: #{ $r == $e }';  
  
}

///--------------------------------------------------------------------------///