///--------------------------------------------------------------------------///

@import 'increase';

///
/// @method decrease
/// decreases a number [in a map] by X
/// @param map {map|number} designed for map, can be number
/// @param key {string|list|number} key (or keylist) to number, 
///   or the number for X if map is a number
/// @param x {number} x when map is really a map
/// @return updated {map|number} the updated map or number
///


@function decrease( $map, $key: 1, $x: 1 ){
  @if type-of( $key ) == number {
    $n: abs($key);
    @return increase( $map, -$n );
  } @else {
    $n: abs($x);
    @return increase( $map, $key, -$n );
  }
}

///--------------------------------------------------------------------------///

@if false {
  
  $i: 5;
  $r: decrease( $i );
  @debug 'decrease works: #{$r==4}';
  
  $c: total;
  $m1: ( #{$c}: $i, a: map );
  $r: decrease( $m1, $c );
  $r: get( $r, $c ) == 4;
  @debug 'decrease [map] works: #{($r)}';
  
}

///--------------------------------------------------------------------------///