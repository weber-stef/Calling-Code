///--------------------------------------------------------------------------///

@import 'get';
//@import 'print'; //enable if debugging

///--------------------------------------------------------------------------///

///
/// @method set
/// updates a (deep) map, returning the updated (deep) map
/// @param map {map} the map
/// @param key {string|list} the key or key list 
/// @param val {any} the value to add/update final map/key with
/// @return set_map {map} the updated map
///



///--------------------------------------------------------------------------///

@function set( $map, $key, $value: null ){

///--------------------------------------------------------------------------///

  $_DEBUG: false;
  
///--------------------------------------------------------------------------///
    
  //internal map variable (changes often)
  $m: $map;  
  
  //map counter
  $_maps: 1;
  
  //create maps store original map
  $maps: ( map#{$_maps}: $map );
  
  
///--------------------------------------------------------------------------///

  //check key type
  $kt: type( $key );

  //handle deep maps via key list
  @if $kt == list {
    
    @if $_DEBUG { @debug 'key list detected'; }
    
    $l: length($key);
    
    $i: 0;
    
    @each $k in $key {
      
      $i: $i + 1;
      
      @if $_DEBUG { @debug 'searching for key #{$i}: #{$k}'; }
      
      //keep digging until target map/key
      $h: has( $m, $k );
      
      @if $h {
        
        @if $_DEBUG { @debug 'found #{$k} in map #{$i}'; }
        
        $x: map-get( $m, $k );
        
        //check for map
        @if type( $x, map ) {
          
          //update current map (m)
          $m: $x;
          
          @if $_DEBUG { @debug 'key #{$k} is map, adding to maps'; }
                    
          //add to maps
          $_maps: $_maps + 1;
          $_map: ( map#{$_maps}: ( key: $k, map: $m ) );
          $maps: map-merge( $maps, $_map );                  
          
        }
        
        //if property is not map, prep it for merge on target key/map
        @else {
          
          //check if last
          @if( $i == $l ){             
            //assign map and key for map-merge
            $map: $m;
            $key: $k; 
          } //end if last         
        } //end !map       
      } //end has key
      @else {
        @debug '#{$i} of #{$l}';
        //add key if it doesn't exist and this is last in keys
        @if $i == $l {
          @return map-merge( $m, ( #{$k}: $value ) )
        } @else {
          @error 'set( $map, $key, $value ) there is no key #{$k} in map #{$i}.. #{print($m)}';
        }
      }
    }
  }

///--------------------------------------------------------------------------///

  $l: length( $maps );
  $i: $l;
  $_k: $key; //the initial 'last' key
  $last: $map; //the initial target map
  $first: true; //triggers to false after first run
  
  @if $_DEBUG { 
    @debug 'found #{$l} maps to update';
    @debug '#{print($maps)}';
  }

  //recreate each map from last to first
  @while $l >= $i {      

    @if $_DEBUG { @debug 'PROCESSING map #{$i} of #{$l}'; }

    //on first (the last in maps) map, assign key/value    
    @if $i == $l {
      $temp: ( #{$key}: $value );
      @if $_DEBUG { @debug 'updating map (key) #{$key} in map #{$i}.. #{print($last)} with #{print($temp)}'; }
      //add key:value to target map
      $last: map-merge( $last, $temp );
    }
    
    @if $_DEBUG { @debug 'CURRENTLY #{print($last)}'; }
    
    //get _map from maps
    $mk: map#{$i};
    @if $_DEBUG { @debug 'reading #{$mk} from maps'; }
    $_m: map-get( $maps, $mk );
    @if type( $_m ) != map {
      @warn 'get/set could not fetch #{$mk}';
    }

    @if $i != 1 {
      //get the key to assign map
      $_key: map-get( $_m, key );
      //get the target map to merge
      $_map: map-get( $_m, map );
      //update last key in in case this is map #2
      $_k: $_key;
      //$parent: ( #{$_key}: $_map );
      @if $_DEBUG { @debug 'MERGING #{print($last)} into #{print($_map)}'; }
      //merge into parent map
      $last: map-merge( $_map, $last );
    }
    @else {
      //return like traditional map-get if it's a single key
      @if $first { @return $last; }
      $final: ( #{$_k}: $last );
      @if $_DEBUG { @debug 'SETTING #{print($final)} into first (original) map' }      
      //serve final map as last
      $last: map-merge( $_m, $final );            
    }

    @if $first { $first: false; }
    
    $i: $i - 1;
    
    @if $i == 0 { 
      @if $_DEBUG { @debug 'set() returning #{print($last)}'; }
      @return $last; 
    }

  } //end while
  
}

///--------------------------------------------------------------------------///

@if false {

  $m1: ( a: map, b: value );
  $r: set( $m1, a, newvar );
  $r: get( $r, a ) == newvar;
  @debug 'set works: #{ $r }';

  $m2: ( top: ( deep: deepmap, deep2: here ), top2: yo );
  $r: set( $m2, top deep, changed ); 
  ///* deep update returned #{print($r)} */
  $r: get( $r, top deep ) == changed;
  @debug 'set [deep] works: #{ $r }';
  
}

///--------------------------------------------------------------------------///
