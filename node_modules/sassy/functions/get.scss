///--------------------------------------------------------------------------///

@import 
  'type',
  'has'
;

//@import 'print'; //enable if debugging

///--------------------------------------------------------------------------///

///
/// @method get
/// gets a property (or properties) from a map
/// @param map {map} the map to get from
/// @param key {string|list} can be a string (OR list, for nested maps)
/// @return value {any} the target map/key:value
///

@function get( $map, $key ){

  $_DEBUG: false;  
  
  //this will be changed internally
  $m: $map;  
  
  //check key type
  $kt: type( $key );

  //handle deep maps via key list
  @if $kt == list {
    
    @if $_DEBUG { @debug 'key list detected'; }
    
    $l: length($key);
    
    $i: 0;
    
    @each $k in $key {
      
      $i: $i + 1;
      
      @if $_DEBUG { @debug 'searching for key #{$i}: #{$k}'; }
      
      //keep digging until target key/map is found
      $h: has( $m, $k );
      
      @if $h {
        
        @if $_DEBUG { @debug 'found #{$k} in map #{$i}'; }
        
        $x: map-get( $m, $k );
        
        //check for map
        @if type( $x, map ) {
          @if $_DEBUG { @debug 'key #{$k} is map, going recursive'; }
          $m: $x;
        }
        
        //if property is not map
        @else {
          
          @if $_DEBUG { @debug 'checking if last property'; }
          
          //check if last
          @if( $i == $l ){ 
            
            @if $_DEBUG { @debug 'is last property'; }
            
            //assign map and key for map-merge
            $map: $m;
            $key: $k; 
            
          } //end if last         
        } //end !map       
      } //end has key
      
      @else {
        @error 'get( $map, $key ) there is no key #{$k} in map #{$i}.. #{print($m)} ';
      }
      
    }
  }

///--------------------------------------------------------------------------///

  @if $_DEBUG { @debug 'returning get request'; }

  $v: map-get( $map, $key );
    
  @return $v;
  
}

///--------------------------------------------------------------------------///

@if false {
  
  $m1: ( a: map, b: value );
  $r: get( $m1, a ) == map;
  @debug 'get works: #{ $r }';
  
  $m2: ( a: ( b: deepmap ) );
  $r: get( $m2, ( a, b ) ) == deepmap;
  @debug 'get [deep] works: #{ $r }';    	  
  
}

///--------------------------------------------------------------------------///