///--------------------------------------------------------------------------///

///
/// @method explode
/// breaks a string into a list, separated at matches to the delimiter character
/// @param string {string} the string to explode
/// @param [delimiter='-'] {string} the delimiter (single character to break at)
/// @return exploded {list} string as list broken at delimiter
///

@function explode( $string, $delim: '-' ) {

  $_DEBUG: false;
  
  $s: $string;
  $d: $delim;  
  $l: ();
  $x: str-length($s);
  $i: 1;
  $z: str-length( $delim );
  $more: true;
    
  @if type-of( $d ) != string { $d: ''; }
  
  @if $_DEBUG { @debug 'exploding #{$s} at #{$d} #{$x}'; }

  @for $i from 1 through $x {
    $n: str-length( $s );    
    $p: if( $d == '', 2, str-index( $s, $d ) );
    @if $p {        
      $t: str-slice( $s, 0, $p - 1 );
      $l: append( $l, $t );
      $s: str-slice( $s, $p + $z, $n );
      @if $_DEBUG { @debug 'temp is #{$t}, s now #{$s}'; }
    } @else {        
      @if $n > 0 {
        $l: append( $l, $s );
        $s: '';
      }
    }

  }
  
  @if $_DEBUG { @debug 'returning #{type-of($l) of length( $l )}, #{$l}'; }
  
  @return $l;

}

///--------------------------------------------------------------------------///


@if false {
  
  $a: busted;
  $r: explode( $a, '' );
  @debug 'explode [ empty: "" ]: #{ $r == ( b u s t e d ) }';
  
  $a: hyphen-string;
  $r: explode( $a );
  @debug 'explode [ default: - ]: #{ $r == ( hyphen string ) }';
 
  $a: 'stack.string';
  $r: explode( $a, '.' );
  @debug 'explode [ custom: . ]: #{ $r == ( stack string ) }';

   
  $a: 'candy';
  $r: explode( $a, 'and' );
  @debug 'explode [ long: and ]: #{ $r == ( c y ) }';
 
}
///--------------------------------------------------------------------------///