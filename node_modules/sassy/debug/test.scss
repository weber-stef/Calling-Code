///--------------------------------------------------------------------------///

@import 
  '../functions/apply',  
  '../functions/type',
  '../functions/types',
  '../functions/implode',  
  'process'
;

///
/// SASS/SCSS Unit Testing
/// apply, test, result
/// @use $verdict: test( $method_name, $arguments, $expect: true )
/// @echo with @include result( $name, $verdict )
/// @requires apply
///

@function test( $args... ){
  
  //setup
  $a: $args;  
  $l: length( $a );
  $v: null;
  $n: 'name';
  $lock: 'lock123';  
  $ma: $lock;
  $r: $lock;
  $e: true;
  
  //resolve arguments  
  @if $l > 1 {
    //first is name
    $n: nth( $a, 1 );    
    $s: nth( $a, 2 );
    $st: type( $s );
    //second is argument(s) or result
    @if $st == list { $ma: $s; $r: apply( $n, $s ); }
    @else if $st == bool { $r: $s; }
    @else { $r: call( $n, $s ); }
    @if $l > 2 {
      //third is the expect (if provided)
      $e: nth( $a, 3 );      
    }
    @if $l > 3 {
      $f: nth( $a, 4 );
      @if type( $f, string ){ 
        //@debug 'found variation: #{$f}';
        $v: $f;
      }
    }
  }
  
  //toss if no result set
  @if $r == $lock { @error 'test requires at least 2 arguments!' }
  
  $ts: false;
  @if $ma != $lock {    
    $at: type( $ma );
    //@debug 'args were provided as #{$at} with #{length($ma)} items';        
    $ts: apply( types, $ma );
    $ts: implode( $ts );
  }
  
  //add variation
  $n: if( $v == null, '#{$n}( #{$ts} )', '#{$n} [ #{$v} ]' );

  //process test result  
  $test: sassy_debug_process( $n, $r, $e );
  
  @return $test;
  
};


@import 'result';

@mixin test( $args... ){
  @include result( apply( test, $args ) );
}



//@debug 'test(standard): #{ test( generic, true, true ) }';
//@debug 'test(variation): #{ test( generic, true, true, variation ) }';
///--------------------------------------------------------------------------///